kind: ConfigMap
apiVersion: v1
metadata:
  name: rsyslogd-config
data:
  templates.conf: |
    # Audit Log format
    template(name="auditlog-forwarding" type="string" string="<%PRI%>%TIMESTAMP:::date-rfc3339% %HOSTNAME% %syslogtag:1:32%%msg:::sp-if-no-1st-sp%%msg%")

    # JSON Format for Logs
    template(name="json-log-forwarding" type="string"
          #string="<%PRI%>1 %TIMESTAMP:::date-rfc3164% %$.clustername% %$.containertag%: %$!all-json%\n")
          string="%$!all-json%")
    
    # Timestamp format for RFC3339
    template(name="timereportedrfc3339" type="string"
          string="%timereported:::date-rfc3339%")

    template(name="kube-log-forwarding" type="list") {
        constant(value="<")
        property(name="pri")
        constant(value=">")
        property(name="timestamp" dateFormat="rfc3339")
        constant(value=" ")
        property(name="hostname")
        constant(value=" ")
        property(name="syslogtag" position.from="1" position.to="32")
        constant(value=": ")
        property(name="$.pod")
        constant(value=" ")
        property(name="$.namespace")
        constant(value=" ")
        property(name="$.container")
        constant(value=" ")
        property(name="msg" spifno1stsp="on" )
        property(name="msg")
        }
    
  openshift_audit_logs.conf: |
    # Forward k8s-audit logs
    ruleset(name="audit_logs") {
      action(type="omfwd" name="splunk_api_endpoint" Template="auditlog-forwarding" Target=`echo $LOGSERVER` Port=`echo $LOGSERVER_PORT` Protocol="udp" )
      stop
    }

    input(type="imfile" file="/var/log/kube-apiserver/audit.log"
        tag="k8s-audit"
        Severity="info"
        Facility="local0"
        ruleset="audit_logs")

  openshift_system_logs.conf: |
    ruleset(name="system_logs")
    {
        # THESE ARE GLOBALS CURRENTLY MANUALLY SET
        #set $.containertag = "{{ .Values.clustertag }}.container";
        #set $.logeventtag = "{{ .Values.clustertag }}.logevent";
        #set $.securityeventtag = "{{ .Values.clustertag }}.securityevent";
        #set $.clustername = "{{ .Values.clustername }}";
        set $.containertag = "mega-sno.container";
        set $.logeventtag = "mega-sno.logevent";
        set $.securityeventtag = "mega-sno.securityevent";
        set $.clustername = "mega-sno";

        #set $.pod_namespace_container = re_extract($!metadata!filename, "/var/log/containers/(.*).log", 0, 1, "");
        #set $.pod = field($.pod_namespace_container, "_", 1);
        #set $.namespace = field($.pod_namespace_container, "_", 2);
        #set $.container = field($.pod_namespace_container, "_", 3);

        # THESE COME FROM THE FILENAME
        set $.pod_namespace_container = re_extract($!metadata!filename, "/var/log/containers/(.*)-[a-f0-9]+.log", 0, 1, "");
        set $.pod = field($.pod_namespace_container, 95, 1);
        set $.namespace = field($.pod_namespace_container, 95, 2);
        set $.container = field($.pod_namespace_container, 95, 3);
        
        set $!docker!container_id = $.container;
        set $!kubernetes!host = $hostname;
        set $!kubernetes!pod_name = $.pod;
        set $!kubernetes!namespace_name = $.namespace;
        set $!kubernetes!container_name = $.container;
        set $!kubernetes!labels!application = field($.namespace, 45, 1);
        #set $.rc = re_extract($.pod, '(.+)-[a-f0-9]+', 0, 1, "");
        #set $!kubernetes!labels!deploymentConfig = re_extract($.rc, '(.+)-[a-f0-9]+', 0, 1, $.rc);
        set $!kubernetes!labels!deploymentConfig = re_extract($.pod, '(.*)-[a-f0-9]+-', 0, 1, "");
        set $!kubernetes!labels!microservice = $!kubernetes!labels!deploymentConfig;
        set $!hostname = $hostname;
        set $.writetime = exec_template("timereportedrfc3339");
        set $.message = $msg;
        set $!message = $.message;
        set $!@timestamp = $.writetime;
        unset $!metadata;

        # Gather only OpenShift Namespaces
        if not ($.namespace contains "openshift-") and not ($.namespace contains "kube-") then {
          stop
        }
        
        action(type="omfwd"
            target  = `echo $LOGSERVER`
            port    = `echo $LOGSERVER_PORT`
            protocol= "udp"
            #template= "kube-log-forwarding"
            template= "log-forwarding"
            )
        stop
    }

    # Follow the container log files
    input(type="imfile" file="/var/log/containers/*.log"
           tag="kubernetes"
           Severity="info"
           Facility="local0"
           ruleset="system_logs")

  rsyslog.conf: |
    global(MaxMessageSize="16384")
    global(LocalHostName=`echo $NODENAME`)
    global(workDirectory="/var/tmp")
    
    #### MODULES ####
    module(load="imuxsock"    # provides support for local system logging (e.g. via logger command)
           SysSock.Use="off") # Turn off message reception via local log socket; 
                              # local messages are retrieved through imjournal now.
    module(load="imjournal"   # provides access to the systemd journal
           StateFile="imjournal.state"  # File to store the position in the journal
           Remote="on")                 # Also read logs from the host
    module(load="builtin:omfile" Template="RSYSLOG_TraditionalFileFormat")
    # Provides container logs via file
    module(load="imfile" PollingInterval="5")
    module(load="mmjsonparse")

    #### GLOBAL DIRECTIVES ####
    # Include all config files in /etc/rsyslog.d/
    $IncludeConfig /config/templates.conf

    #$IncludeConfig /config/openshift_audit_logs.conf
    #$IncludeConfig /config/openshift_system_logs.conf

    # Gather Kubernetes Metadata from the filename
    ruleset(name="container_logs")
    {
        # THESE ARE GLOBALS CURRENTLY MANUALLY SET
        #set $.containertag = "{{ .Values.clustertag }}.container";
        #set $.logeventtag = "{{ .Values.clustertag }}.logevent";
        #set $.securityeventtag = "{{ .Values.clustertag }}.securityevent";
        #set $.clustername = "{{ .Values.clustername }}";
        set $.containertag = "mega-sno.container";
        set $.logeventtag = "mega-sno.logevent";
        set $.securityeventtag = "mega-sno.securityevent";
        set $.clustername = "mega-sno";

        #set $.pod_namespace_container = re_extract($!metadata!filename, "/var/log/containers/(.*).log", 0, 1, "");
        #set $.pod = field($.pod_namespace_container, "_", 1);
        #set $.namespace = field($.pod_namespace_container, "_", 2);
        #set $.container = field($.pod_namespace_container, "_", 3);

        # THESE COME FROM THE FILENAME
        set $.pod_namespace_container = re_extract($!metadata!filename, "/var/log/containers/(.*)-[a-f0-9]+.log", 0, 1, "");
        set $.pod = field($.pod_namespace_container, 95, 1);
        set $.namespace = field($.pod_namespace_container, 95, 2);
        set $.container = field($.pod_namespace_container, 95, 3);
        
        set $!docker!container_id = $.container;
        set $!kubernetes!host = $hostname;
        set $!kubernetes!pod_name = $.pod;
        set $!kubernetes!namespace_name = $.namespace;
        set $!kubernetes!container_name = $.container;
        set $!kubernetes!labels!application = field($.namespace, 45, 1);
        #set $.rc = re_extract($.pod, '(.+)-[a-f0-9]+', 0, 1, "");
        #set $!kubernetes!labels!deploymentConfig = re_extract($.rc, '(.+)-[a-f0-9]+', 0, 1, $.rc);
        set $!kubernetes!labels!deploymentConfig = re_extract($.pod, '(.*)-[a-f0-9]+-', 0, 1, "");
        set $!kubernetes!labels!microservice = $!kubernetes!labels!deploymentConfig;
        set $!hostname = $hostname;
        set $.writetime = exec_template("timereportedrfc3339");
        set $.message = $msg;
        set $!message = $.message;
        set $!@timestamp = $.writetime;
        unset $!metadata;

        # Ignore OpenShift Namespaces
        if ($.namespace startswith "openshift-") or ($.namespace startswith "kube-") or ($.namespace startswith "open-cluster-management") then {
          stop
        }

        # Ignore RHACM Namespaces
        if ($.namespace == "hive") or ($.namespace == "multicluster-engine") or ($.namespace startswith "open-cluster-management") then {
          stop
        }

        # Ignore RHACS Namespaces
        if ($.namespace == "stackrox") or ($.namespace == "rhacs-operator") then {
          stop
        }
        
        action(type="mmjsonparse")
        action(type="omfwd"
            target  = `echo $LOGSERVER`
            port    = `echo $LOGSERVER_PORT`
            protocol= "udp"
            #template= "kube-log-forwarding"
            template= "json-log-forwarding"
            )
        stop
    }
    
    # Follow the container log files
    input(type="imfile" file="/var/log/containers/*.log"
           tag="kubernetes"
           Facility="local0"
           endmsg.regex="^.*std... F "
           ruleset="container_logs")
    
    # Basic forwarding to remote syslog server
    #ruleset(name="to_remote")
    #{
    #    action(type="omfwd"
    #        target  = `echo $LOGSERVER`
    #        port    = `echo $LOGSERVER_PORT`
    #        protocol= "udp"
    #        )
    #}
    #call to_remote
